let subst = (\A.\x.\y.\P.\eq.case[\m.\n.\q.(P m -> P n)] eq of refl(x) -> (\m.m)) : (A : Type) -> (x : A) -> (y : A) -> (P : A -> Type) -> (x = y : A) -> P x -> P y in
let eq_symm  = (\A.\x.\y.\p.case[\m.\n.\q.(n = m : A)] p of refl(z) -> refl) : (A : Type) -> (x : A) -> (y : A) -> (x = y : A) -> (y = x : A) in

let Void = <> in
let void_elim = (\A.\v.case v of) : (A : Type) -> Void -> A in
let not = (\A.A -> Void) : Type -> Type in

let Nat' = (~n.\u.<zero : Unit + succ : n u>) : Unit -> Type in
let Nat = Nat' unit in
let 0 = (fold(<zero = unit>)) : Nat in
let succ = (\n.fold(<succ = n>)) : Nat -> Nat in
let 1 = succ 0 in let 2 = succ 1 in
let plus' = (fix (\plus.\u.\m.\u.\n. case unfold m of <zero = _> -> n | <succ = m'> -> succ (plus unit m' unit n))) : Unit -> Nat -> Unit -> Nat -> Nat in
let plus = (\m.\n.plus' unit m unit n) : Nat -> Nat -> Nat in

let c_nat = (\x.\y.\q.case unfold x of <zero = _> -> (case unfold y of <zero = _> -> Unit
                                                                    | <succ = y'> -> Void)
                                    | <succ = x'> -> (case unfold y of <zero = _> -> Void
                                                                    | <succ = y'> -> (x' = y' : Nat)))
          : (x : Nat) -> (y : Nat) -> (x = y : Nat) -> Type in
let k_nat = (\z.case [z.c_nat (fold z) (fold z) refl] unfold z of <zero = _> -> unit | <succ = z'> -> ((refl) : (z' = z' : Nat))) : (z : Nat) -> c_nat z z refl in
let succ_inj = (\m.\n.\p.case [c_nat] p of refl(z) -> k_nat z) : (m : Nat) -> (n : Nat) -> (succ m = succ n : Nat) -> (m = n : Nat) in

let succ_neq_0 = (\n.\p.subst Nat (succ n) 0 (\x. case unfold x of <zero = _> -> Void | <succ = _> -> Unit) p unit) : (n : Nat) -> not (succ n = 0 : Nat) in

let unit_eq = (\u.ucase [u.(u = unit : Unit)] u of unit -> refl) : (u : Unit) -> (u = unit : Unit) in

let plus_0_n = (\n.refl) : (n : Nat) -> (n = plus 0 n : Nat) in

let plus_n_0' = (fix (\plus_n_0.\u.\n.case [n.(fold n) = (plus (fold n) 0) : Nat] unfold n of
                    <zero = u> -> (case[\x.\y.\q.(fold(<zero = x>) = (fold(<zero = y>)) : Nat)] (unit_eq u) of refl(z) -> refl)
                 | <succ = n'> -> (
                     let rec = plus_n_0 u n' in
                     case[\x.\y.\q.(succ x = succ y : Nat)] (plus_n_0 u n') of refl(z) -> refl
                 )
           )) : Unit -> (n : Nat) -> (n = plus n 0 : Nat) in
let plus_n_0 = (\n.plus_n_0' unit n) : (n : Nat) -> (n = plus n 0 : Nat) in

let plus_succ_left = (\n.\m.refl) : (n : Nat) -> (m : Nat) -> (succ (plus n m) = plus (succ n) m : Nat) in
let plus_succ_right' = (fix (\plus_succ_right.\u.\n.\u.\m. case [n.succ (plus (fold n) m) = plus (fold n) (succ m) : Nat] unfold n of
                        <zero = _> -> refl
                     | <succ = n'> -> (case[\x.\y.\q.succ x = succ y : Nat] (plus_succ_right u n' u m) of refl(z) -> refl)
                  )) : Unit -> (n : Nat) -> Unit -> (m : Nat) -> (succ (plus n m) = plus n (succ m) : Nat) in
let plus_succ_right = (\n.\m.plus_succ_right' unit n unit m) : (n : Nat) -> (m : Nat) -> (succ (plus n m) = plus n (succ m) : Nat) in

let plus_commut' = (fix (\plus_commut.\u.\n.\u.\m.case [n.(plus (fold n) m = plus m (fold n) : Nat)] unfold n of
                    <zero = u> -> (subst Unit unit u (\z.(m = (plus m fold(<zero = z>)) : Nat)) (eq_symm Unit u unit (unit_eq u)) (plus_n_0 m))
                 | <succ = n'> -> (
                     let rec = plus_commut u n' u m in
                     let succ_rec = (case[\x.\y.\q.succ x = succ y : Nat] rec of refl(z) -> refl) in
                     subst Nat (succ (plus m n')) (plus m (succ n')) (\z.(succ (plus n' m) = z : Nat)) (plus_succ_right m n') succ_rec
                 )
              )) : Unit -> (n : Nat) -> Unit -> (m : Nat) -> (plus n m = plus m n : Nat) in
let plus_commut = (\n.\m.plus_commut' unit n unit m) : (n : Nat) -> (m : Nat) -> (plus n m = plus m n : Nat) in

unit