let Nat = (~n.\u.(b : {zero | succ}) * (case b of zero -> Unit | succ -> n u)) : Unit -> Type in
let 0 = (fold('zero, unit)) : Nat unit in
let succ = (\n.fold('succ, n)) : Nat unit -> Nat unit in
let plus = (fix (\f.\m.\n. let (l, r) = unfold m in case l of zero -> n | succ -> succ (f r n))) : Nat unit -> Nat unit -> Nat unit in
let 1 = succ 0 in
let 2 = succ 1 in

let plus_0_n = (\n.refl) : (n : Nat unit) -> (plus 0 n = n) in
let plus_1_l = (\n.refl) : (n : Nat unit) -> (plus 1 n = succ n) in
let plus_id = (\n.\m.\p. case[\x.\y.\q.(plus x x = plus y y)] p of refl(x) -> refl) : (n : Nat unit) -> (m : Nat unit) -> (n = m) -> (plus n n = plus m m) in
let plus_n_0 = (fix (\f.\n.let (l, r) = unfold n in case l of zero -> refl | succ -> let i = f r in )) : (n : Nat unit) -> (plus n 0 = n) in

plus 2 1