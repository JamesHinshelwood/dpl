let Nat = (~n.\u.<zero : Unit + succ : n u>) : Unit -> Type in
let zero = (fold(<zero = unit>)) : Nat unit in
let succ = (\n.fold(<succ = n>)) : Nat unit -> Nat unit in
let one = succ zero in

let Vec = (\A.~v.\n.<nil : (n = zero) + cons : ((m : Nat unit) * A * v m * (n = succ m))>) : Type -> Nat unit -> Type in
let nil = (\A.fold(<nil = refl>)) : (A : Type) -> Vec A zero in
let cons = (\A.\x.\n.\v.fold(<cons = (n, x, v, refl)>)) : (A : Type) -> A -> (n : Nat unit) -> Vec A n -> Vec A (succ n) in

let zip = (fix (\f.\A.\B.\n.\v1.\v2.
    case [n.Vec (A * B) (fold n)] unfold n of <zero = _> -> nil (A * B)
     )) : (A : Type) -> (B : Type) -> (n : Nat unit) -> Vec A n -> Vec B n -> Vec (A * B) n in

unit