data Bool = true
          | false

----------------    ----------------    -----------------
G |- Bool : Type    G |- true : Bool    G |- false : Bool

data Option (A : Type) = some of A
                       | none

--------------------------  ----------------------------------  --------------------
G |- Option : Type -> Type  G |- some : (A : Type) -> Option A  G |- none : Option A

data Void

----------------
G |- Void : Type

data Nat = zero
         | succ of Nat

---------------     ---------------     ----------------------
G |- Nat : Type     G |- zero : Nat     G |- succ : Nat -> Nat

data Vec (A : Type) (n : Nat) = nil of (n = zero)
                              | cons of (m : Nat) * A * Vec A m * (n = succ m)

------------------------------  -----------------------------------     -
G |- Vec : Type -> Nat -> Type  G |- nil : (n = zero) -> Vec A zero     G |- cons : ((m : Nat) * A * Vec A m * (n = succ m)) -> Vec



let Nat = fix(\n.<zero : Unit + succ : n>) : Type in
let zero = <zero = unit> : Nat in